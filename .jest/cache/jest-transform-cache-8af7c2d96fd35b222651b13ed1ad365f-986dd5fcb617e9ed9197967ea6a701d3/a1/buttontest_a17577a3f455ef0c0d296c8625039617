1100df2762d66784099bdd1e9ec74298
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_test_renderer_1 = __importDefault(require("react-test-renderer"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const index_1 = __importDefault(require("../index"));
describe('Button component tests', () => {
    it('First render with all props passed', () => {
        const component = react_test_renderer_1.default.create(react_1.default.createElement(index_1.default, { title: "Button title" })).toJSON();
        expect(component).toMatchSnapshot();
    });
    it('should render a button with the tile "Button title"', () => {
        (0, react_2.render)(react_1.default.createElement(index_1.default, { title: "Button title" }));
        const button = react_2.screen.getByText(/title/i);
        expect(button).toHaveTextContent('Button title');
    });
    it('should be disabled if disabled prop is passed', () => {
        (0, react_2.render)(react_1.default.createElement(index_1.default, { disabled: true, title: "Button title" }));
        const button = react_2.screen.getByText(/title/i);
        expect(button).toBeDisabled();
    });
    it('should be disabled when clicked', async () => {
        let disabled = false;
        const setDisabled = jest.fn(() => (disabled = !disabled));
        (0, react_2.render)(react_1.default.createElement(index_1.default, { disabled: disabled, title: "Button title", onClick: () => {
                setDisabled();
            } }));
        const button = react_2.screen.getByText(/title/i);
        console.log('disabledBefore', disabled);
        expect(button).not.toBeDisabled();
        await user_event_1.default.click(button);
        (0, react_2.render)(react_1.default.createElement(index_1.default, { disabled: disabled, title: "Button title", onClick: () => {
                setDisabled();
            } }));
        const rerenderedButton = react_2.screen.getByText(/title/i);
        console.log('disabledAfter', disabled);
        expect(rerenderedButton).toBeDisabled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hcmtvYXJ0aG9mZXIvRG9jdW1lbnRzL1Byb2plY3RzL3Rlc3QtcHJvamVjdC9zcmMvY29tcG9uZW50cy9idXR0b24vX190ZXN0c19fL2J1dHRvbi50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEwQjtBQUMxQiw4RUFBMkM7QUFDM0Msa0RBQXdEO0FBQ3hELDZFQUErQztBQUMvQyxxREFBOEI7QUFFOUIsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxFQUFFLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQzVDLE1BQU0sU0FBUyxHQUFHLDZCQUFRLENBQUMsTUFBTSxDQUFDLDhCQUFDLGVBQU0sSUFBQyxLQUFLLEVBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1RSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO1FBQzdELElBQUEsY0FBTSxFQUFDLDhCQUFDLGVBQU0sSUFBQyxLQUFLLEVBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLE1BQU0sR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7UUFDdkQsSUFBQSxjQUFNLEVBQUMsOEJBQUMsZUFBTSxJQUFDLFFBQVEsUUFBQyxLQUFLLEVBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUNqRCxNQUFNLE1BQU0sR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFMUQsSUFBQSxjQUFNLEVBQ0osOEJBQUMsZUFBTSxJQUNMLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLEtBQUssRUFBQyxjQUFjLEVBQ3BCLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osV0FBVyxFQUFFLENBQUM7WUFDaEIsQ0FBQyxHQUNELENBQ0gsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLGNBQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV4QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWxDLE1BQU0sb0JBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekIsSUFBQSxjQUFNLEVBQ0osOEJBQUMsZUFBTSxJQUNMLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLEtBQUssRUFBQyxjQUFjLEVBQ3BCLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osV0FBVyxFQUFFLENBQUM7WUFDaEIsQ0FBQyxHQUNELENBQ0gsQ0FBQztRQUVGLE1BQU0sZ0JBQWdCLEdBQUcsY0FBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrb2FydGhvZmVyL0RvY3VtZW50cy9Qcm9qZWN0cy90ZXN0LXByb2plY3Qvc3JjL2NvbXBvbmVudHMvYnV0dG9uL19fdGVzdHNfXy9idXR0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgdXNlciBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9pbmRleCc7XG5cbmRlc2NyaWJlKCdCdXR0b24gY29tcG9uZW50IHRlc3RzJywgKCkgPT4ge1xuICBpdCgnRmlyc3QgcmVuZGVyIHdpdGggYWxsIHByb3BzIHBhc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSByZW5kZXJlci5jcmVhdGUoPEJ1dHRvbiB0aXRsZT1cIkJ1dHRvbiB0aXRsZVwiIC8+KS50b0pTT04oKTtcbiAgICBleHBlY3QoY29tcG9uZW50KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBidXR0b24gd2l0aCB0aGUgdGlsZSBcIkJ1dHRvbiB0aXRsZVwiJywgKCkgPT4ge1xuICAgIHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiQnV0dG9uIHRpdGxlXCIgLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoL3RpdGxlL2kpO1xuXG4gICAgZXhwZWN0KGJ1dHRvbikudG9IYXZlVGV4dENvbnRlbnQoJ0J1dHRvbiB0aXRsZScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGRpc2FibGVkIGlmIGRpc2FibGVkIHByb3AgaXMgcGFzc2VkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8QnV0dG9uIGRpc2FibGVkIHRpdGxlPVwiQnV0dG9uIHRpdGxlXCIgLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoL3RpdGxlL2kpO1xuXG4gICAgZXhwZWN0KGJ1dHRvbikudG9CZURpc2FibGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgZGlzYWJsZWQgd2hlbiBjbGlja2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHNldERpc2FibGVkID0gamVzdC5mbigoKSA9PiAoZGlzYWJsZWQgPSAhZGlzYWJsZWQpKTtcblxuICAgIHJlbmRlcihcbiAgICAgIDxCdXR0b25cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICB0aXRsZT1cIkJ1dHRvbiB0aXRsZVwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBzZXREaXNhYmxlZCgpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApO1xuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoL3RpdGxlL2kpO1xuXG4gICAgY29uc29sZS5sb2coJ2Rpc2FibGVkQmVmb3JlJywgZGlzYWJsZWQpO1xuXG4gICAgZXhwZWN0KGJ1dHRvbikubm90LnRvQmVEaXNhYmxlZCgpO1xuXG4gICAgYXdhaXQgdXNlci5jbGljayhidXR0b24pO1xuXG4gICAgcmVuZGVyKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIHRpdGxlPVwiQnV0dG9uIHRpdGxlXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIHNldERpc2FibGVkKCk7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICk7XG5cbiAgICBjb25zdCByZXJlbmRlcmVkQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgvdGl0bGUvaSk7XG5cbiAgICBjb25zb2xlLmxvZygnZGlzYWJsZWRBZnRlcicsIGRpc2FibGVkKTtcblxuICAgIGV4cGVjdChyZXJlbmRlcmVkQnV0dG9uKS50b0JlRGlzYWJsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==