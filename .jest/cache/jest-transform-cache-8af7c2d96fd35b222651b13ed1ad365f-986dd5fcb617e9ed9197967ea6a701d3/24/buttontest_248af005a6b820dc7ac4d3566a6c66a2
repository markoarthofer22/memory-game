5bf2b35c5ab70ef1c187943fbd70a7c5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_test_renderer_1 = __importDefault(require("react-test-renderer"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const index_1 = __importDefault(require("../index"));
describe('Button component tests', () => {
    it('First render with all props passed', () => {
        const component = react_test_renderer_1.default.create(react_1.default.createElement(index_1.default, { title: "Button title" })).toJSON();
        expect(component).toMatchSnapshot();
    });
    it('should render a button with the tile "Button title"', () => {
        (0, react_2.render)(react_1.default.createElement(index_1.default, { title: "Button title" }));
        const button = react_2.screen.getByText(/title/i);
        expect(button).toHaveTextContent('Button title');
    });
    it('should be disabled if disabled prop is passed', () => {
        (0, react_2.render)(react_1.default.createElement(index_1.default, { disabled: true, title: "Button title" }));
        const button = react_2.screen.getByText(/title/i);
        expect(button).toBeDisabled();
    });
    it('should be disabled when clicked', async () => {
        let disabled = false;
        (0, react_2.render)(react_1.default.createElement(index_1.default, { disabled: disabled, title: "Button title", onClick: () => {
                disabled = true;
            } }));
        const button = react_2.screen.getByText(/title/i);
        expect(button).not.toBeDisabled();
        await user_event_1.default.click(button);
        expect(button).toBeDisabled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hcmtvYXJ0aG9mZXIvRG9jdW1lbnRzL1Byb2plY3RzL3Rlc3QtcHJvamVjdC9zcmMvY29tcG9uZW50cy9idXR0b24vX190ZXN0c19fL2J1dHRvbi50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEwQjtBQUMxQiw4RUFBMkM7QUFDM0Msa0RBQXdEO0FBQ3hELDZFQUErQztBQUMvQyxxREFBOEI7QUFFOUIsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxFQUFFLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQzVDLE1BQU0sU0FBUyxHQUFHLDZCQUFRLENBQUMsTUFBTSxDQUFDLDhCQUFDLGVBQU0sSUFBQyxLQUFLLEVBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1RSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO1FBQzdELElBQUEsY0FBTSxFQUFDLDhCQUFDLGVBQU0sSUFBQyxLQUFLLEVBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLE1BQU0sR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7UUFDdkQsSUFBQSxjQUFNLEVBQUMsOEJBQUMsZUFBTSxJQUFDLFFBQVEsUUFBQyxLQUFLLEVBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUNqRCxNQUFNLE1BQU0sR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBQSxjQUFNLEVBQ0osOEJBQUMsZUFBTSxJQUNMLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLEtBQUssRUFBQyxjQUFjLEVBQ3BCLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osUUFBUSxHQUFHLElBQUksQ0FBQztZQUNsQixDQUFDLEdBQ0QsQ0FDSCxDQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsY0FBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUxQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWxDLE1BQU0sb0JBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hcmtvYXJ0aG9mZXIvRG9jdW1lbnRzL1Byb2plY3RzL3Rlc3QtcHJvamVjdC9zcmMvY29tcG9uZW50cy9idXR0b24vX190ZXN0c19fL2J1dHRvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB1c2VyIGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2luZGV4JztcblxuZGVzY3JpYmUoJ0J1dHRvbiBjb21wb25lbnQgdGVzdHMnLCAoKSA9PiB7XG4gIGl0KCdGaXJzdCByZW5kZXIgd2l0aCBhbGwgcHJvcHMgcGFzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlbmRlcmVyLmNyZWF0ZSg8QnV0dG9uIHRpdGxlPVwiQnV0dG9uIHRpdGxlXCIgLz4pLnRvSlNPTigpO1xuICAgIGV4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIGJ1dHRvbiB3aXRoIHRoZSB0aWxlIFwiQnV0dG9uIHRpdGxlXCInLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJCdXR0b24gdGl0bGVcIiAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgvdGl0bGUvaSk7XG5cbiAgICBleHBlY3QoYnV0dG9uKS50b0hhdmVUZXh0Q29udGVudCgnQnV0dG9uIHRpdGxlJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgZGlzYWJsZWQgaWYgZGlzYWJsZWQgcHJvcCBpcyBwYXNzZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxCdXR0b24gZGlzYWJsZWQgdGl0bGU9XCJCdXR0b24gdGl0bGVcIiAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgvdGl0bGUvaSk7XG5cbiAgICBleHBlY3QoYnV0dG9uKS50b0JlRGlzYWJsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBkaXNhYmxlZCB3aGVuIGNsaWNrZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGRpc2FibGVkID0gZmFsc2U7XG4gICAgcmVuZGVyKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIHRpdGxlPVwiQnV0dG9uIHRpdGxlXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKTtcbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KC90aXRsZS9pKTtcblxuICAgIGV4cGVjdChidXR0b24pLm5vdC50b0JlRGlzYWJsZWQoKTtcblxuICAgIGF3YWl0IHVzZXIuY2xpY2soYnV0dG9uKTtcblxuICAgIGV4cGVjdChidXR0b24pLnRvQmVEaXNhYmxlZCgpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9